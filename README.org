#+title: Emacs Configuration
#+author: David Dimagid
#+property: header-args :tangle README.el
#+warning: Don't forget to run `org-babel-tangle` to generate README.el!

* My Emacs Configuration File
** Intro
This is my Emacs configuration repository, currently under
development. I frequently invoke the macro [[https://www.gnu.org/software/emacs/manual/html_node/use-package/][use-package]] to simplify my
Emacs setup, making simple to configure and load packages, and to
define custom settings and keybindings.

** Customization
When customizing Emacs through the menu bar (Customize Emacs) or
directly in your init.el, Emacs generates configuration lines that are
typically stored in custom-set-variables and custom-set-faces
sections. To maintain a clean and organized configuration, you can redirect
these auto-generated lines to a separate custom.el file, located in your
Emacs configuration directory.

** How Emacs Loads Configuration Files
Emacs loads several configuration files, and I will focus on the
following three:

*early-init.el*: If present, this file is loaded before init.el and
is used to perform early initialization tasks, such as setting up the
file system and environment variables.

*init.el*: Your personal Emacs configuration file, where you can add
custom settings and code.

*custom.el*: The automatically generated configuration file that
stores your customized settings, redirected from the
"custom-set-variables" and "custom-set-faces" sections.

*Note*: In my configuration, I use a README.org file to generate the
README.el file, which is then loaded by init.el. This approach takes
advantage of literate programming, allowing me to keep my
configuration organized and easily maintainable.

** README.org to README.el
To generate the README.el file, I utilize [[https://orgmode.org/manual/Extracting-Source-Code.html][Org mode's powerful tangling
feature]]. By running ~M-x org-babel-tangle RET~ in the README.org file,
this technique automatically extracts the Emacs configuration code and
creates the README.el file. This approach allows anyone to showcase
their Emacs configuration directly in the repository's README, making
it easy to share and maintain.

** Package Configuration
Now, let's take a look at my packages configurations:
*** Emacs customizing built-in variables
#+begin_src emacs-lisp
  ;; Configure Emacs built-in variables and settings
  (use-package emacs
    :bind
    ("C-x C-b" . ibuffer)
    ("C-c d" . eldoc)
    ("<down-mouse-8>" . kill-ring-save)
    ("<down-mouse-9>" . yank)
    ("C-c o i" . dimagid/find-user-readme-org-file)
    ("C-c o r" . restart-emacs)
    :init
    (add-to-list 'initial-frame-alist '(fullscreen . maximized))
    (setq custom-file (locate-user-emacs-file "custom.el"))
    (load custom-file :no-error-if-file-is-missing)
    :custom
    (visible-bell t)
    (tab-always-indent 'complete)
    (use-short-answers t)
    (require-final-newline t)
    (completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (switch-to-buffer-obey-display-actions t)
    (Info-hide-note-references nil)
    (debugger-stack-frame-as-list t)
    (history-delete-duplicates t)
    (kill-do-not-save-duplicates t)
    (enable-recursive-minibuffers t)
    (transient-align-variable-pitch t)
    (set-mark-command-repeat-pop t)
    (display-buffer-alist
     '(("\\*Occur\\*"
        (display-buffer-reuse-mode-window
         display-buffer-below-selected))))
    :config
    (fido-mode)
    (fido-vertical-mode)
    (column-number-mode)
    (tty-tip-mode)
    (repeat-mode)
    (global-prettify-symbols-mode)
    (save-place-mode)
    (minibuffer-depth-indicate-mode)
    (global-display-line-numbers-mode)
    (add-hook 'after-save-hook 'check-parens)
    (defun dimagid/find-user-readme-org-file ()
      "Edit the README.org file in another window."
      (interactive)
      (find-file-other-window (concat "~/.config/emacs/README.org"))))
#+end_src

*** Ef-themes
#+begin_src emacs-lisp
  ;; Colorful and legible themes
  (use-package ef-themes
    :ensure t
    :init
    (mapc #'disable-theme custom-enabled-themes)
    :config
    (ef-themes-select 'ef-owl)
    (setq ef-themes-mixed-fonts t ; allow spacing-sensitive constructs
          ef-themes-variable-pitch-ui t))
#+end_src

*** Exec-path-from-shell
#+begin_src emacs-lisp
  ;; Get environment variables such as $PATH from the shell.
  (use-package exec-path-from-shell
    :ensure t
    :init
    ;; Initialize exec-path-from-shell in various Emacs environments.
    (when (or (memq window-system '(mac ns x))
  	    (eq window-system 'pgtk)
  	    (daemonp))
      (exec-path-from-shell-initialize)))
#+end_src

*** Elisp-def
#+begin_src emacs-lisp
  ;; Macro-aware go-to-definition for elisp.
  (use-package elisp-def
    :ensure t)
#+end_src

*** Elisp-demos
#+begin_src emacs-lisp
  ;; Elisp API Demos.
  (use-package elisp-demos
    :ensure t
    :config
    (advice-add 'describe-function-1
  	      :after #'elisp-demos-advice-describe-function-1)
    (advice-add 'helpful-update
  	      :after #'elisp-demos-advice-helpful-update))
#+end_src

*** Emacs Lisp
#+begin_src emacs-lisp
  ;; Config Emacs Lisp
  (use-package lisp-mode
    :config
    (defun dimagid/elisp-ert-run-tests-in-buffer ()
      "Deletes all loaded tests from the runtime, saves the current
       buffer and the file being loaded, evaluates the current buffer
       and runs all loaded tests with ert."
      (interactive)
      (save-buffer)
      (let ((file-to-load (progn
  			  (goto-char (point-min))
  			  (re-search-forward "(load-file \"\\([^)]+\\)\"")
  			  (match-string 1))))
        (with-current-buffer (find-file-noselect file-to-load)
  	(save-buffer)))
      (ert-delete-all-tests)
      (eval-buffer)
      (ert 't))
    (defun dimagid/elisp-eval-and-comment ()
      "Evaluate a Lisp expression and insert its value
   as a comment at the end of the line.
   Useful for documenting values or checking values."
      (interactive)
      (save-excursion
        (backward-sexp)
        (-let [result
               (thread-last (thing-at-point 'sexp)
  			  read-from-string
  			  car
  			  eval
  			  (format " ;; â‡’ %s"))]
  	(forward-sexp)
  	(end-of-line)
  	(insert result))))
    :bind (:map emacs-lisp-mode-map
  	      ("C-c b" . dimagid/elisp-ert-run-tests-in-buffer)
  	      ("C-c ;" . dimagid/elisp-eval-and-comment)
  	      ("M-." . elisp-def))
    :hook (emacs-lisp-mode . package-lint-flymake-setup))
#+end_src

*** Highlight-defined
#+begin_src emacs-lisp
  ;; Syntax highlighting of known Elisp symbols.
  (use-package highlight-defined
    :ensure t
    :hook (emacs-lisp-mode . highlight-defined-mode))
#+end_src

*** Completion preview
#+begin_src emacs-lisp
  ;; Preview completion with inline overlay
  (use-package completion-preview
    :ensure t
    :bind (:map completion-preview-active-mode-map
  	      ("M-n" . completion-preview-next-candidate)
  	      ("M-p" . completion-preview-prev-candidate))
    :hook (prog-mode text-mode markdown-mode)
    :config
    (completion-preview-mode)
    (global-completion-preview-mode))
#+end_src

*** Casual
#+begin_src emacs-lisp
  ;; Transient user interfaces for various modes.
  (use-package casual
    :ensure t)
#+end_src

*** Savehist
#+begin_src emacs-lisp
  ;; Configure savehist to save minibuffer history
  (use-package savehist
    :config
    (setq savehist-additional-variables '(projectile-project-command-history
  					corfu-history
  					register-alist
  					kill-ring))
    (savehist-mode))
#+end_src

*** Marginalia
#+begin_src emacs-lisp
  ;; Enable marginalia to add completion annotations to existing commands.
  (use-package marginalia
    :ensure t
    :config (marginalia-mode))
#+end_src

*** Consult
#+begin_src emacs-lisp
  ;; Consulting completing-read
  (use-package consult
    :ensure t
    :bind (;; A recursive grep
           ("M-s M-g" . consult-grep)
           ;; Search for files names recursively
           ("M-s M-f" . consult-find)
           ;; Search through the outline (headings) of the file
           ("M-s M-o" . consult-outline)
           ;; Search the current buffer
           ("M-s M-l" . consult-line)
           ;; Switch to another buffer, or bookmarked file, or recently
           ;; opened file.
           ("M-s M-b" . consult-buffer)))
#+end_src

*** Embark
#+begin_src emacs-lisp
  ;; Conveniently act on minibuffer completions
  (use-package embark
    :ensure t
    :bind (("C-." . embark-act)
  	 :map minibuffer-local-map
  	 ("C-c C-c" . embark-collect)
  	 ("C-c C-e" . embark-export))
    :config
    (define-key icomplete-minibuffer-map (kbd "C-.") nil))
#+end_src

*** Embark-consult
#+begin_src emacs-lisp
  ;; Consult integration for Embark
  (use-package embark-consult
    :ensure t)
#+end_src

*** wgrep
#+begin_src emacs-lisp
  ;; Writable grep buffer
  (use-package wgrep
    :ensure t)
#+end_src

*** Corfu
#+begin_src emacs-lisp
  ;; Corfu enhances in-buffer completion with a small completion popup.
  (use-package corfu
    :ensure t
    :init
    (setq corfu-preview-current nil
  	corfu-min-width 20
  	corfu-popupinfo-delay '(1.25 . 0.5))
    :config
    (global-corfu-mode)
    (corfu-popupinfo-mode) ; shows documentation after `corfu-popupinfo-delay'
    ;; Sort by input history (no need to modify `corfu-sort-function').
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src

*** Nerd-icons
#+begin_src emacs-lisp
  ;; Emacs nerd font icons library.
  (use-package nerd-icons
    :ensure t)
#+end_src

*** Nerd-icons-completion
#+begin_src emacs-lisp
  ;; Add icons to completion candidates.
  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (nerd-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

*** Nerd-icons-corfu
#+begin_src emacs-lisp
  ;; Introduces a margin formatter for Corfu which adds icons.
  (use-package nerd-icons-corfu
    :ensure t
    :after corfu
    :custom
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

*** Nerd-icons-dired
#+begin_src emacs-lisp
  ;; Shows icons for each file in dired mode.
  (use-package nerd-icons-dired
    :ensure t
    :hook dired-mode
    :delight " NID")
#+end_src

*** Nerd-icons-ibuffer
#+begin_src emacs-lisp
  ;; Display nerd icons in ibuffer.
  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

*** Recentf
#+begin_src emacs-lisp
  ;; Enable recentf to track recently opened files
  (use-package recentf
    :config
    (setopt recentf-max-saved-items 50)
    (recentf-mode 1))
#+end_src

*** Autorevert
#+begin_src emacs-lisp
  ;; Enable autorevert to revert buffers when files change on disk
  (use-package autorevert
    :config
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t))
#+end_src

*** Desktop
#+begin_src emacs-lisp
  ;; Save partial status of Emacs when killed
  (use-package desktop
    :config
    (setq
     desktop-dirname "~/.config/emacs/desktop/"
     desktop-base-file-name "~/.config/emacs/desktop/.emacs.desktop"
     desktop-base-lock-name "~/.config/emacs/desktop/.emacs.desktop.lock")
    (desktop-save-mode))
#+end_src

*** Delsel
#+begin_src emacs-lisp
  ;; Enable to delete selection if you insert
  (use-package delsel
    :config (delete-selection-mode 1))
#+end_src

*** Magit
#+begin_src emacs-lisp
  ;; A git porcelain inside Emacs
  (use-package magit
    :ensure t
    :config
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

*** diff-hl
#+begin_src emacs-lisp
  ;; Highlight uncommitted changes using VC
  (use-package diff-hl
    :ensure t
    :config
    (diff-hl-dired-mode)
    (global-diff-hl-mode))
#+end_src

*** Smartparens
#+begin_src emacs-lisp
  ;; Automatic insertion, wrapping and paredit-like
  ;; navigation with user defined pairs.
  (use-package smartparens
    :ensure t
    :hook (prog-mode text-mode markdown-mode)
    :config
    (set-face-attribute 'sp-pair-overlay-face nil :background "#444444")
    ;; enable global strict-mode
    (smartparens-global-strict-mode)
    ;; enable the pres-set bindings
    (sp-use-smartparens-bindings)
    ;; disable autoclose for ' and ` in Emacs Lisp mode
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'emacs-lisp-mode "`" nil :actions nil))
#+end_src

*** Keycast
#+begin_src emacs-lisp
  ;; Show current command and its binding
  (use-package keycast
    :ensure t
    :config (keycast-tab-bar-mode 1))
#+end_src

*** Undo-tree
#+begin_src emacs-lisp
  ;; Treat undo history as a tree
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history t)
    (global-undo-tree-mode 1)
    :delight " UTree")
#+end_src

*** Which Key
#+begin_src emacs-lisp
  ;; Display available keybindings in popup
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

*** Rainbow-delimiters
#+begin_src emacs-lisp
  ;; Highlight brackets according to their depth.
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Windmove
#+begin_src emacs-lisp
  ;; Directional window-selection routines
  (use-package windmove
    :config
    ;; use shift + arrow keys to switch between visible buffers
    (windmove-default-keybindings))
#+end_src

*** Winner
#+begin_src emacs-lisp
  ;; Restore old window configurations
  ;; Use C-c right and C-c left for undo or redo window configurations
  (use-package winner
    :config (winner-mode))
  #+end_src

*** Auto-fill
#+begin_src emacs-lisp
  ;; Enable auto-fill mode to automatically wrap text
  (use-package auto-fill
    :hook
    (prog-mode text-mode markdown-mode)
    :config
    (auto-fill-mode)
    :delight "AF")
#+end_src

*** Whitespace
#+begin_src emacs-lisp
  ;; This package is a minor mode to visualize blanks
  (use-package whitespace
    :hook (text-mode markdown-mode))
  #+end_src

*** Eros
#+begin_src emacs-lisp
  ;; Evaluation Result OverlayS for Emacs Lisp.
  (use-package eros
    :ensure t
    :config (eros-mode))
  #+end_src

*** Projectile
#+begin_src emacs-lisp
  ;; Manage and navigate projects in Emacs easily.
  (use-package projectile
    :ensure t
    :bind (:map projectile-mode-map
  	      ("C-c p" . projectile-command-map))
    :init (projectile-mode +1)
    :delight " PJILE")
  #+end_src

*** Dired
#+begin_src emacs-lisp
  ;; Dired
  (use-package dired
    :commands (dired)
    :bind (:map dired-mode-map
  	      ("C-o" . casual-dired-tmenu) ; casual-dired transient menu
  	      ("s" . casual-dired-sort-by-tmenu)
  	      ("/" . casual-dired-search-replace-tmenu)
  	      ("<tab>" . dired-subtree-toggle)
  	      ("TAB" . dired-subtree-toggle)
  	      ("<backtab>" . dired-subtree-remove)
  	      ("S-TAB" . dired-subtree-remove))
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode)
     (dired-mode . dired-omit-mode))
    :config
    (setq dired-recursive-copies 'always
  	dired-recursive-deletes 'always
  	delete-by-moving-to-trash t
  	dired-dwim-target t)
    :delight "Dired")
  #+end_src

*** Dired-subtree
#+begin_src emacs-lisp
  ;; Manage and navigate projects in Emacs easily.
  (use-package dired-subtree
    :ensure t
    :after dired
    :config
    (setq dired-subtree-use-backgrounds nil))
  #+end_src

*** ibuffer
#+begin_src emacs-lisp
  ;; Operate on buffers like dired
  (use-package ibuffer
    :bind (:map ibuffer-mode-map
  	      ("C-o" . casual-ibuffer-tmenu)))
#+end_src

*** Calc
#+begin_src emacs-lisp
  ;; The GNU Emacs calculator
  (use-package calc
    :bind
    (:map calc-mode-map
      	("C-o" . casual-calc-tmenu))
    :hook
    (calc-mode . (lambda () (display-line-numbers-mode -1))))
#+end_src

*** Trashed
#+begin_src emacs-lisp
  ;; Viewing/editing system trash can.
  (use-package trashed
    :ensure t
    :commands (trashed)
    :config
    (setq trashed-action-confirmer 'y-or-n-p)
    (setq trashed-use-header-line t)
    (setq trashed-sort-key '("Date deleted" . t))
    (setq trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src

*** Dictionary
#+begin_src emacs-lisp
  ;; Dictionary client for accessing dictionary servers via RFC 2229 protocol
  ;; (Note: RFC 2229 is an informational document.
  ;;        RFC: Request for Comments, a system of Internet documents)
  (use-package dictionary
    :bind ("<f7>" . dictionary-lookup-definition)
    :config (setq dictionary-server "dict.org"))
#+end_src

*** Ielm
#+begin_src emacs-lisp
  ;; Interaction mode for Emacs Lisp
  (use-package ielm
    :bind (:map ielm-map
  	      ("C-c C-q" . dimagid/ielm-clear-repl)
  	      ("<S-return>" . dimagid/ielm-insert-newline))
    :config
    (defun dimagid/ielm-clear-repl ()
      "Clear current REPL buffer."
      (interactive)
      (let ((inhibit-read-only t))
  	(erase-buffer)
  	(ielm-send-input)))
    (defun dimagid/ielm-insert-newline ()
      "Insert a newline without evaluating the sexp."
      (interactive)
      (let ((ielm-dynamic-return nil))
  	(ielm-return))))
#+end_src

*** Eglot
#+begin_src emacs-lisp
  ;; The Emacs Client for LSP servers
  (use-package eglot
    :bind (:map eglot-mode-map
  	      ("C-c l a" . eglot-code-actions)
  	      ("C-c l f" . eglot-format)
  	      ("<f6>" . eglot-format)
  	      ("C-c l r" . eglot-rename)
  	      ("C-c l n" . flymake-goto-next-error)
  	      ("C-c l p" . flymake-goto-prev-error)
  	      ("C-c l s" . flymake-show-buffer-diagnostics)
  	      ("C-c l S" . flymake-show-project-diagnostics)
  	      ("C-c l i" . eglot-inlay-hints-mode)
  	      ("C-c l e" . eglot-events-buffer)
  	      ("C-c l x" . eglot-stderr-buffer)
  	      ("C-c l c" . eglot-clear-status)
  	      ("C-c l u" . eglot-signal-didChangeConfiguration)
  	      ("C-c l o" . eglot-code-action-organize-imports)
  	      ("C-c l q" . eglot-code-action-quickfix)
  	      ("C-c l X" . eglot-code-action-extract)
  	      ("C-c l I" . eglot-code-action-inline)
  	      ("C-c l w" . eglot-code-action-rewrite)
  	      ("C-c l b" . eglot-format-buffer)
  	      ("C-c l R" . eglot-reconnect)))
#+end_src

*** Ellama
#+begin_src emacs-lisp
  ;; Tool for interacting with LLMs.
  (use-package ellama
    :bind ("C-c e" . ellama-transient-main-menu)
    :init
    ;; customize display buffer behaviour
    ;; see ~(info "(elisp) Buffer Display Action Functions")~
    (setopt ellama-chat-display-action-function #'display-buffer-full-frame)
    (setopt ellama-instant-display-action-function #'display-buffer-at-bottom)
    :config
    ;; set ellama-long-lines-length to fill-column
    (setq ellama-long-lines-length fill-column)
    :hook
    (ellama-session-mode . (lambda () (whitespace-mode -1))))
#+end_src

*** Python
#+begin_src emacs-lisp
  ;; Python's flying circus support for Emacs
  (use-package python
    :bind (:map python-ts-mode-map
  	      ("<f5>" . recompile))
    :hook
    ((python-ts-mode . eglot-ensure))
    :mode
    (("\\.py\\'" . python-ts-mode)))
#+end_src

*** C/C++
#+begin_src emacs-lisp
  ;; Major mode for editing C and similar languages
  (use-package cc-mode
    :bind (:map c-mode-map
  	      ("<f5>" . recompile))
    :hook
    ((c-mode . eglot-ensure)
     (c++-mode . eglot-ensure))
    :mode
    ("\\.c\\'" . c-mode)
    ("\\.cpp\\'" . c++-mode)
    ("\\.h\\'" . c-mode)
    ("\\.hpp\\'" . c++-mode))
#+end_src

*** Jarchive
#+begin_src emacs-lisp
  ;; Open project dependencies in jar archives
  (use-package jarchive
    :ensure t
    :config
    (jarchive-mode))
#+end_src

*** Clojure
#+begin_src emacs-lisp
  ;; Major mode for editing Clojure code.
  (use-package clojure-mode
    :ensure t
    :hook
    ((clojure-mode . eglot-ensure))
    :config
    (setq cider-eldoc-display-for-symbol-at-point nil))
#+end_src

*** COMMENT Conda
#+begin_src emacs-lisp
  ;; Work with your conda environments
  (use-package conda
    :ensure t
    :config
    (setq conda-env-home-directory
  	(expand-file-name "~/condapython")))
#+end_src

*** Helpful
#+begin_src emacs-lisp
  ;; A better *help* buffer.
  (use-package helpful
    :ensure t
    :bind (("C-h f" . helpful-callable)
  	 ("C-h v" . helpful-variable)
  	 ("C-h k" . helpful-key)
  	 ("C-h x" . helpful-command)
  	 ("C-c C-d" . helpful-at-point)
  	 ("C-h F" . helpful-function)))
#+end_src

*** Crux
#+begin_src emacs-lisp
  ;; A cornucopia of useful interactive commands to make your Emacs experience
  ;; more enjoyable.
  (use-package crux
    :ensure t
    :bind
    ("M-o" . crux-smart-open-line)
    ("M-O" . crux-smart-open-line-above)
    (:map ctl-x-4-map
  	("t" . crux-transpose-windows)))
#+end_src

*** Keyfreq
#+begin_src emacs-lisp
  ;; Track command frequencies.
  (use-package keyfreq
    :ensure t
    :config
    (setq keyfreq-excluded-commands
  	'(self-insert-command
  	  forward-char
  	  backward-char
  	  previous-line
  	  next-line
  	  org-self-insert-command
  	  sp-backward-delete-char
  	  mwheel-scroll))
    (keyfreq-mode)
    (keyfreq-autosave-mode))
#+end_src

*** Pulsar
#+begin_src emacs-lisp
  ;; Pulse highlight on demand or after select functions.
  (use-package pulsar
    :ensure t
    :custom
    (pulsar-pulse-region-functions pulsar-pulse-region-common-functions)
    :config
    (setq pulsar-face 'pulsar-green
  	pulsar-iterations 5)
    (pulsar-global-mode))
#+end_src

*** Yasnippet-snippets
#+begin_src emacs-lisp
  ;; Collection of yasnippet snippets
  (use-package yasnippet-snippets
    :ensure t
    :config
    (yas-global-mode))
#+end_src

*** Shell
#+begin_src emacs-lisp
  ;; Specialized comint.el for running the shell
  (use-package shell
    :hook (shell-mode . my-shell-mode-hook-func)
    :config
    (defun my-shell-mode-hook-func ()
      (set-process-sentinel (get-buffer-process (current-buffer))
  			  'my-shell-mode-kill-buffer-on-exit))
    (defun my-shell-mode-kill-buffer-on-exit (process state)
      (message "%s" state)
      (if (or
  	 (string-match "exited abnormally with code.*" state)
  	 (string-match "finished" state))
  	(kill-buffer (current-buffer)))))
#+end_src

*** Suggest
#+begin_src emacs-lisp
  ;; Suggest elisp functions that give the output requested.
  (use-package suggest
    :ensure t
    :defer t)
#+end_src

*** PDF-tools
#+begin_src emacs-lisp
  ;; Support library for PDF documents
  (use-package pdf-tools
    :ensure t
    :config (pdf-tools-install))
#+end_src

*** Lorem-ipsum
#+begin_src emacs-lisp
  ;; Insert dummy pseudo Latin text
  (use-package lorem-ipsum
    :ensure t)
#+end_src

** Conclusion
Thank you for taking the time to review  [[https://github.com/Jpepetrueno/emacs-config.git][my Emacs configuration]]. I hope
it inspires you to create a personalized Emacs experience that suits
your needs.
