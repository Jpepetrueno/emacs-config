#+title: Emacs Configuration
#+author: David Dimagid
#+property: header-args :tangle README.el
#+warning: Don't forget to run `org-babel-tangle` to generate README.el!

* My Emacs Configuration File
** Intro
This is my Emacs configuration repository, currently under
development. I leverage [[https://github.com/jwiegley/use-package/blob/master/README.md][use-package]] to simplify my Emacs setup,
making it easy to install and configure packages, and define custom
settings and keybindings.

** Customization
When customizing Emacs through the menu bar or modifying init.el,
Emacs generates configuration lines that are typically stored in
custom-set-variables and custom-set-faces sections. To maintain a
clean and organized configuration, I redirect these auto-generated
lines to a separate custom.el file, located in my Emacs configuration
directory.

** How Emacs Loads Configuration Files
Emacs loads several configuration files, and I will focus on the
following three:

**early-init.el**: If present, this file is loaded before init.el and
is used to perform early initialization tasks, such as setting up the
file system and environment variables.

**init.el**: Your personal Emacs configuration file, where you can add
custom settings and code.

**custom.el**: The automatically generated configuration file that
stores your customized settings, redirected from the
"custom-set-variables" and "custom-set-faces" sections.

**Note**: In my configuration, I use a README.org file to generate the
README.el file, which is then loaded by init.el. This approach takes
advantage of literate programming, allowing me to keep my
configuration organized and easily maintainable.

** README.org to README.el
To generate the README.el file, I use Org mode's built-in tangling
feature. By running `M-x org-babel-tangle RET` in the README.org file,
I can automatically extract the Emacs configuration code and create
the  README.el file. This allows me to showcase my Emacs configuration
directly in the README of my repository, making it easy to share and
maintain.  For more information on this technique, see the Org mode
manual: [[https://orgmode.org/manual/Extracting-Source-Code.html][Extracting Source Code with Org mode]].

** Emacs Core Config
#+begin_src emacs-lisp
  ;;; -*- lexical-binding: t -*-
  ;; Configure Emacs core settings
  (use-package emacs
    :bind
    ("C-x C-b" . ibuffer)
    :init
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (setq load-prefer-newer t
	  custom-file (locate-user-emacs-file "custom.el"))
    (load custom-file :no-error-if-file-is-missing)
    :config
    (fido-mode t)
    (fido-vertical-mode t)
    (setq visible-bell t
	  use-short-answers t
	  debugger-stack-frame-as-list t
	  history-length 50
	  history-delete-duplicates t
	  completion-ignore-case t
	  read-buffer-completion-ignore-case t
	  switch-to-buffer-obey-display-actions t
	  require-final-newline t
	  tab-always-indent 'complete))
#+end_src

** Savehist Config
#+begin_src emacs-lisp
  ;; Configure savehist to save minibuffer history
  (use-package savehist
    :config
    (savehist-mode 1)
    (add-to-list 'savehist-additional-variables 'kill-ring))
#+end_src

** Marginalia Config
#+begin_src emacs-lisp
  ;; Enable marginalia to add completion annotations to existing commands.
  (use-package marginalia
    :ensure t
    :config (marginalia-mode))
#+end_src

** Corfu Config
#+begin_src emacs-lisp
  ;; Corfu enhances in-buffer completion with a small completion popup.
  (use-package corfu
    :ensure t
    :hook (after-init . global-corfu-mode)
    :bind (:map corfu-map ("<tab>" . corfu-complete))
    :config
    (setq tab-always-indent 'complete)
    (setq corfu-preview-current nil)
    (setq corfu-min-width 20)

    (setq corfu-popupinfo-delay '(1.25 . 0.5))
    (corfu-popupinfo-mode 1) ; shows documentation after `corfu-popupinfo-delay'

    ;; Sort by input history (no need to modify `corfu-sort-function').
    (with-eval-after-load 'savehist
      (corfu-history-mode 1)
      (add-to-list 'savehist-additional-variables 'corfu-history)))
#+end_src

** Nerd-icons Config
#+begin_src emacs-lisp
  ;; Emacs nerd font icons library.
  (use-package nerd-icons
    :ensure t)
#+end_src

** Nerd-icons-completion Config
#+begin_src emacs-lisp
  ;; Add icons to completion candidates.
  (use-package nerd-icons-completion
    :ensure t
    :after marginalia
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src

** Nerd-icons-corfu Config
#+begin_src emacs-lisp
  ;; Introduces a margin formatter for Corfu which adds icons.
  (use-package nerd-icons-corfu
    :ensure t
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Nerd-icons-dired Config
#+begin_src emacs-lisp
  ;; Shows icons for each file in dired mode.
  (use-package nerd-icons-dired
    :ensure t
    :hook (dired-mode . nerd-icons-dired-mode))
#+end_src

** Nerd-icons-ibuffer Config
#+begin_src emacs-lisp
  ;; Display nerd icons in ibuffer.
  (use-package nerd-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Recentf Config
#+begin_src emacs-lisp
  ;; Enable recentf to track recently opened files
  (use-package recentf
    :config (recentf-mode 1))
#+end_src

** Autorevert Config
#+begin_src emacs-lisp
  ;; Enable autorevert to revert buffers when files change on disk
  (use-package autorevert
    :config
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t))
#+end_src

** Desktop Config
#+begin_src emacs-lisp
  ;; Save partial status of Emacs when killed
  (use-package desktop
    :config (desktop-save-mode 1))
#+end_src

** Delsel Config
#+begin_src emacs-lisp
  ;; Enable to delete selection if you insert
  (use-package delsel
    :config (delete-selection-mode 1))
#+end_src

** Magit Config
#+begin_src emacs-lisp
  ;; A git porcelain inside Emacs
  (use-package magit
    :ensure t)
#+end_src

** Smartparens Config
#+begin_src emacs-lisp
  ;; Automatic insertion, wrapping and paredit-like
  ;; navigation with user defined pairs.
  (use-package smartparens
    :ensure t
    :bind (:map smartparens-mode-map
		("C-c s" . smartparens-command-map))
    :hook (prog-mode text-mode markdown-mode)
    :config
    ;; enable global strict-mode
    (smartparens-global-strict-mode)
    ;; enable the pres-set bindings
    (sp-use-smartparens-bindings)
    ;; disable autoclose for ' and ` in Emacs Lisp mode
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'emacs-lisp-mode "`" nil :actions nil))
#+end_src

** Auto-fill Config
#+begin_src emacs-lisp
  ;; Enable auto-fill mode to automatically wrap text
  (use-package auto-fill
    :hook
    (prog-mode text-mode markdown-mode org-mode)
    :config
    (setq fill-column 80)
    (setq-default auto-fill-function 'do-auto-fill)
    (auto-fill-mode 1)
    :delight " AF")
#+end_src

** Keycast Config
#+begin_src emacs-lisp
  ;; Show current command and its binding
  (use-package keycast
    :ensure t
    :config (keycast-tab-bar-mode 1))
#+end_src

** Undo-tree Config
#+begin_src emacs-lisp
  ;; Treat undo history as a tree
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history t)
    (global-undo-tree-mode 1))
#+end_src

** Display Line Numbers Config
#+begin_src emacs-lisp
  ;; Interface for display-line-numbers
  (use-package display-line-numbers
    :config (global-display-line-numbers-mode))
#+end_src

** Flyspell Config
#+begin_src emacs-lisp
  ;; On-the-fly spell checker
  (use-package flyspell
    :config (flyspell-prog-mode))
#+end_src

** Which Key Config
#+begin_src emacs-lisp
  ;; Display available keybindings in popup
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

** Rainbow-delimiters Config
#+begin_src emacs-lisp
  ;; Highlight brackets according to their depth.
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Lisp Config
#+begin_src emacs-lisp
  ;; Config Emacs Lisp
  (use-package lisp-mode
    :config
    (defun my-elisp-ert-run-tests-in-buffer ()
      "Deletes all loaded tests from the runtime, saves the current
       buffer and the file being loaded, evaluates the current buffer
       and runs all loaded tests with ert."
      (interactive)
      (save-buffer)
      (let ((file-to-load (progn
			    (goto-char (point-min))
			    (re-search-forward "(load-file \"\\([^)]+\\)\"")
			    (match-string 1))))
	(with-current-buffer (find-file-noselect file-to-load)
	  (save-buffer)))
      (ert-delete-all-tests)
      (eval-buffer)
      (ert 't))
    :bind (:map emacs-lisp-mode-map
		("C-c e b" . my-elisp-ert-run-tests-in-buffer))
    :hook (emacs-lisp-mode . flymake-mode))
#+end_src

** Windmove Config
#+begin_src emacs-lisp
  ;; Directional window-selection routines
  (use-package windmove
    :config
    ;; use shift + arrow keys to switch between visible buffers
    (windmove-default-keybindings))
#+end_src

** Winner Config
#+begin_src emacs-lisp
  ;; Restore old window configurations
  ;; Use C-c right and C-c left for undo or redo window configurations
  (use-package winner
    :config (winner-mode))
  #+end_src

** Whitespace Config
#+begin_src emacs-lisp
  ;; Minor mode to visualize TAB, (HARD) SPACE, NEWLINE
  (use-package whitespace
    :config (global-whitespace-mode))
  #+end_src

** Eros Config
#+begin_src emacs-lisp
  ;; Evaluation Result OverlayS for Emacs Lisp.
  (use-package eros
    :ensure t
    :config (eros-mode))
  #+end_src

** Projectile Config
#+begin_src emacs-lisp
  ;; Manage and navigate projects in Emacs easily.
  (use-package projectile
    :ensure t
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map))
    :init (projectile-mode +1))
  #+end_src

** Dired Config
#+begin_src emacs-lisp
  ;; Dired
  (use-package dired
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-dwim-target t))
#+end_src

** Dired-subtree Config
#+begin_src emacs-lisp
  ;; Manage and navigate projects in Emacs easily.
  (use-package dired-subtree
    :ensure t
    :after dired
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))
  #+end_src

** trashed
#+begin_src emacs-lisp
  ;; Viewing/editing system trash can.
  (use-package trashed
    :ensure t
    :commands (trashed)
    :config
    (setq trashed-action-confirmer 'y-or-n-p)
    (setq trashed-use-header-line t)
    (setq trashed-sort-key '("Date deleted" . t))
    (setq trashed-date-format "%Y-%m-%d %H:%M:%S"))
#+end_src
