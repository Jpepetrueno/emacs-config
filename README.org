#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle README.el
#+WARNING: Don't forget to run `org-babel-tangle` to generate README.el!

* My Emacs Configuration File
** Intro
This is my Emacs configuration file, currently in development. Feel
free to use it as a starting point for creating your own personalized
Emacs setup.

I use [[https://github.com/jwiegley/use-package/blob/master/README.md][use-package]] to organize my Emacs configuration. This package
provides a simple and efficient way to manage my Emacs setup, allowing
me to easily install and configure packages, as well as define custom
settings and keybindings.

** Customization
When you customize Emacs through the menu bar or sometimes when you
make changes to your init.el file, Emacs generates configuration lines
that are typically stored in the custom-set-variables and
custom-set-faces sections. To keep my configuration organized and
clean, I redirect these auto-generated lines to a separate file called
custom-vars.el, located in your user Emacs directory.

** Loading Configuration Files
Here Emacs loads two configuration files:

1. `init.el`: Your personal Emacs configuration file, where you can
   add custom settings and code. In my case, init.el also loads the
   README.el file, which is generated from the README.org file. This
   allows me to display my Emacs configuration directly in the README
   of my Emacs configuration repository.
2. `custom-vars.el`: The auto-generated configuration file that stores
   your customized settings, redirected from the custom-set-variables
   and custom-set-faces sections.

By separating your customizations into these two files, you can keep
your init.el file clean and organized, while still benefiting from
Emacs's auto-generated configuration features.

`Note`: To use this configuration, simply add your custom settings to
README.org and let Emacs generate the custom-vars.el file automatically.
This way, you can easily manage your Emacs configuration and keep your
repository up-to-date.

** README.org to README.el
To generate the README.el file from the README.org file, simply run
~M-x org-babel-tangle RET~ in the README.org file. This will
automatically create the README.el file, allowing you to display your
Emacs configuration directly in the README of your Emacs
configuration repository.

** Emacs Core Config
#+begin_src emacs-lisp
  ;; Configure Emacs core settings
  (use-package emacs
    :bind (("M-o" . other-window)
	   ("C-x C-b" . ibuffer))
    :init
    (add-to-list 'initial-frame-alist '(fullscreen . maximized))
    (setq load-prefer-newer t
	  global-auto-revert-non-file-buffers t
	  custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file)
    :config
    (savehist-mode 1)
    (recentf-mode 1)
    (global-auto-revert-mode 1)
    (desktop-save-mode 1)
    (pending-delete-mode 1)
    (fido-mode t)
    (fido-vertical-mode t)
    (setq visible-bell t
	  use-short-answers t
	  debugger-stack-frame-as-list t
	  history-length 50
	  history-delete-duplicates t
	  completion-ignore-case t
	  read-buffer-completion-ignore-case t
	  switch-to-buffer-obey-display-actions t
	  require-final-newline t
	  tab-always-indent 'complete)
    (add-to-list 'savehist-additional-variables 'kill-ring))
#+end_src

** Magit Config
#+begin_src emacs-lisp
  ;; Install and configure Magit package for a more user-friendly Git interface
  (use-package magit
    :ensure t)
#+end_src

** Smartparens Config
#+begin_src emacs-lisp
  ;; smartparens configuration
  (use-package smartparens
    :ensure t  ;; install the package
    :hook (prog-mode text-mode markdown-mode) ;; add `smartparens-mode` to these hooks
    :config
    ;; enable global strict-mode
    (smartparens-global-strict-mode)
    ;; enable the pres-set bindings
    (sp-use-smartparens-bindings))
#+end_src

** Auto-fill Config
#+begin_src emacs-lisp
  ;; Enable auto-fill mode to automatically wrap text
  (use-package auto-fill
    :hook
    (prog-mode text-mode markdown-mode org-mode)
    :config
    (setq fill-column 80)
    (setq-default auto-fill-function 'do-auto-fill)
    (auto-fill-mode 1)
    :delight " AF")
#+end_src

** Keycast Config
#+begin_src emacs-lisp
  ;; Enable keycast mode to display key sequences
  (use-package keycast
    :ensure t
    :init
    (keycast-tab-bar-mode 1))
#+end_src

** Undo-tree Config
#+begin_src emacs-lisp
  ;; Enable undo tree
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-auto-save-history t)
    (global-undo-tree-mode 1))
#+end_src

** Display Line Numbers Config
#+begin_src emacs-lisp
  ;; Enable global-display-line-numbers-mode
  (use-package display-line-numbers
    :config
    (global-display-line-numbers-mode))
#+end_src

** Flyspell Config
#+begin_src emacs-lisp
  ;; Enable Flyspell
  (use-package flyspell
    :config
    (flyspell-prog-mode))
#+end_src

** Which Key Config
#+begin_src emacs-lisp
  ;; Enable which-key
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

** COMMENT LSP Config
#+begin_src emacs-lisp
    ;; Config LSP
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	   (clojure-mode . lsp-deferred)
	   ;; if you want which-key integration
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp lsp-deferred)
#+end_src

** COMMENT LSP UI Config
#+begin_src emacs-lisp
  ;; Config LSP UI
  (use-package lsp-ui
    :commands lsp-ui-mode)
#+end_src

** Rainbow-delimiters Config
#+begin_src emacs-lisp
  ;; Config Rainbow delimiters
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode))
#+end_src

** Lisp Config
#+begin_src emacs-lisp
  ;; Config Emacs Lisp
  (use-package lisp-mode
    :config
    (defun my-elisp-eval-and-run-all-tests-in-buffer ()
      "Deletes all loaded tests from the runtime, evaluates the current
	buffer and runs all loaded tests with ert."
      (interactive)
      (ert-delete-all-tests)
      (eval-buffer)
      (ert 't))
    :bind (:map emacs-lisp-mode-map
		("C-c e b" . my-elisp-eval-and-run-all-tests-in-buffer))
    :hook
    (emacs-lisp-mode . flymake-mode))
#+end_src
